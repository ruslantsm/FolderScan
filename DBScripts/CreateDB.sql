BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT

USE [master]
GO

CREATE DATABASE [FolderScan]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'FolderScan', FILENAME = N'C:\temp\FolderScan.mdf' , SIZE = 5120KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'FolderScan_log', FILENAME = N'C:\temp\FolderScan_log.ldf' , SIZE = 1024KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
GO

ALTER DATABASE [FolderScan] SET COMPATIBILITY_LEVEL = 110
GO

ALTER DATABASE [FolderScan] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [FolderScan] SET ANSI_NULLS OFF 
GO

ALTER DATABASE [FolderScan] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [FolderScan] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [FolderScan] SET ARITHABORT OFF 
GO

ALTER DATABASE [FolderScan] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [FolderScan] SET AUTO_CREATE_STATISTICS ON 
GO

ALTER DATABASE [FolderScan] SET AUTO_SHRINK OFF 
GO

ALTER DATABASE [FolderScan] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [FolderScan] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [FolderScan] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [FolderScan] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [FolderScan] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [FolderScan] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [FolderScan] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [FolderScan] SET  DISABLE_BROKER 
GO

ALTER DATABASE [FolderScan] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [FolderScan] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [FolderScan] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [FolderScan] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [FolderScan] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [FolderScan] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [FolderScan] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [FolderScan] SET RECOVERY SIMPLE 
GO

ALTER DATABASE [FolderScan] SET  MULTI_USER 
GO

ALTER DATABASE [FolderScan] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [FolderScan] SET DB_CHAINING OFF 
GO

ALTER DATABASE [FolderScan] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [FolderScan] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO

ALTER DATABASE [FolderScan] SET  READ_WRITE 
GO

USE [FolderScan]
GO

BEGIN TRANSACTION
GO

CREATE TABLE [dbo].[File]
	(
	Id int NOT NULL IDENTITY (1, 1),
	[Name] [nvarchar](255) NOT NULL,
	[Path] [nvarchar](500) NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE [dbo].[File] ADD CONSTRAINT
	PK_File PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE [dbo].[File] SET (LOCK_ESCALATION = TABLE)

GO

CREATE TABLE [dbo].[Word]
	(
	Id int NOT NULL IDENTITY (1, 1),
	[Name] [nvarchar](255) NOT NULL,
	)  ON [PRIMARY]
GO
ALTER TABLE [dbo].[Word] ADD CONSTRAINT
	PK_Word PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE [dbo].[Word] SET (LOCK_ESCALATION = TABLE)

GO

CREATE TABLE [dbo].[WordEntry]
	(
	Id bigint NOT NULL IDENTITY (1, 1),
	FileId int NOT NULL,
	WordId int NOT NULL,
	WordIndex int NOT NULL,
	WordLine int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE [dbo].[WordEntry] ADD CONSTRAINT
	PK_WordEntry PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO

ALTER TABLE [dbo].[WordEntry]  WITH CHECK ADD  CONSTRAINT [FK_WordEntry_File] FOREIGN KEY([FileId])
REFERENCES [dbo].[File] ([Id])
GO

ALTER TABLE [dbo].[WordEntry] CHECK CONSTRAINT [FK_WordEntry_File]
GO

ALTER TABLE [dbo].[WordEntry]  WITH CHECK ADD  CONSTRAINT [FK_WordEntry_Word] FOREIGN KEY([WordId])
REFERENCES [dbo].[Word] ([Id])
GO

ALTER TABLE [dbo].[WordEntry] CHECK CONSTRAINT [FK_WordEntry_Word]
GO


CREATE NONCLUSTERED INDEX [NonClusteredIndex-WordId] ON [dbo].[WordEntry]
(
	[WordId] ASC
)
INCLUDE ( 	[FileId],
	[WordIndex],
	[WordLine]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [NonClusteredIndex-FileName] ON [dbo].[File]
(
	[Name] ASC
)
INCLUDE ( 	[Id],
	[Path]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [NonClusteredIndex-WordName] ON [dbo].[Word]
(
	[Name] ASC
)
INCLUDE ( 	[Id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

COMMIT

GO

CREATE TYPE [dbo].[WEntry] AS TABLE(
	[FileId] [int] NOT NULL,
	[WordId] [int] NOT NULL,
	[WIndex] [int] NOT NULL,
	[WLine] [int] NOT NULL
)
GO

CREATE PROC [dbo].[InsertEntries]  
	@entries dbo.WEntry READONLY
AS
DECLARE @rc int = 0, @msg varchar(2000)
      
BEGIN TRY
 BEGIN TRANSACTION
 
	INSERT INTO [dbo].[WordEntry]
	SELECT * FROM @entries;
  

 COMMIT TRANSACTION
 RETURN 1
END TRY
BEGIN CATCH
	SET @msg = 'ERROR: ' + ERROR_MESSAGE() + ' at ' 
            + coalesce(ERROR_PROCEDURE(), '')
            + coalesce (' line:' + convert(varchar(30), ERROR_LINE()), '')
            
	IF @@Trancount > 1 OR XACT_STATE() <> 0 
		BEGIN 
			ROLLBACK TRANSACTION
		END

	RAISERROR (@msg, 16, 1)

END CATCH

GO

CREATE TYPE [dbo].[WordEntry] AS TABLE(
	[Name] nvarchar(255) NOT NULL
)
GO

CREATE PROC [dbo].[InsertWords]  
	@entries dbo.WordEntry READONLY
AS
DECLARE @rc int = 0, @msg varchar(2000)
      
BEGIN TRY
 BEGIN TRANSACTION

 EXEC @rc = sp_getapplock @Resource='InsertWordsLock' , @LockMode='Exclusive', @LockOwner='Transaction', @LockTimeout = 10000
 
 IF @rc >= 0 
	BEGIN
		INSERT INTO [dbo].[Word]
		SELECT Name FROM @entries
		EXCEPT SELECT Name FROM [dbo].[Word]
  
		COMMIT TRANSACTION -- will release the lock
		RETURN @rc
	END
ELSE 
	BEGIN
        ROLLBACK TRANSACTION
	END
END TRY
BEGIN CATCH
	SET @msg = 'ERROR: ' + ERROR_MESSAGE() + ' at ' 
            + coalesce(ERROR_PROCEDURE(), '')
            + coalesce (' line:' + convert(varchar(30), ERROR_LINE()), '')
            
	IF @@Trancount > 1 OR XACT_STATE() <> 0 
		BEGIN 
			ROLLBACK TRANSACTION
		END

	RAISERROR (@msg, 16, 1)

END CATCH
 
